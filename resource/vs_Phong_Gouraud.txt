//Phone Reflection model + Smooth/Gouraud shading
#version 330
layout(location=0) in vec3 position;	//3 個 attribute(vertex 性質) //xyz
layout(location=1) in vec2 texcoord;	//uv
layout(location=2) in vec3 normal;		//nx, ny, nz 
										//glEnableVertexAttribArray(1);  
										//glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, 0);
										// 三角形、頂點
										// 多個三角形、個別處裡
										// 三維坐標系轉成投影
										//只想一個頂點
// uniform variable can be viewed as a constant
// you can set the uniform variable by glUniformXXXXXXXX

uniform mat4 model;
uniform mat4 vp;

uniform vec3 ambient = vec3(0.2, 0.2, 0.2);
uniform vec3 eyePos = vec3(25, 25, 25);

// 'out' means vertex shader output for fragment shader
out vec3 vcolor;			
out vec2 vUV;

void main()
{
	vec3 vNormal = vec3(model * vec4(normal, 0.0));	//homogenius coord. [x, y, z, w]
												//normal 不移動 -> w 填 0.
	vec3 vPos = vec3(model * vec4(position, 1.0));
	vUV = texcoord;

	//lighting
	vec3 l = normalize(vec3(1, 1, 0));
	vec3 e_hat = normalize(eyePos - vPos);					//eyePos - vPos
	vec3 r = reflect(-l, vNormal);
	float spec = pow(max(dot(e_hat, r), 0.0), 30);
	float diffuse = max(dot(vNormal, l), 0);	//Lamber diffuse model 
	vcolor = vec3(diffuse+ambient+spec*vec3(1, 1, 1));

	gl_Position=vp*model*vec4(position, 1.0);


}